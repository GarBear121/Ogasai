script_hunter = {
	message = 'Hunter Combat Script',
	hunterExtra = include("scripts\\combat\\script_hunterEX.lua"),
	drinkMana = 30,
	eatHealth = 65,
	potionHealth = 10,
	potionMana = 20,
	feedTimer = 0,
	waitTimer = 0,
	hasPet = true,
	bagWithPetFood = 4,
	slotWithPetFood = GetContainerNumSlots(3), -- last slot in the bag
	foodName = 'PET FOOD NAME',
	stopWhenNoPetFood = false,
	quiverBagNr = 5,
	ammoIsArrow = true,
	useVendor = false,
	buyWhenQuiverEmpty = false,
	stopWhenQuiverEmpty = false,
	stopWhenBagsFull = false,
	hsWhenStop = false,
	hsBag = 1, -- HS in backpack (1rst bag)
	hsSlot = 1, -- HS in slot 1 of the bag: hsBag
	ammoName = 0,
	isSetup = false,
	isChecked = true,
	rangeDistance = 38,
	followTargetDistance = 40,
	useBandage = false,
	hasBandages = false,
	waitAfterCombat = 8;
}


function script_hunter:setup()
	-- no more bug first time
	self.feedTimer = GetTimeEX();
	self.waitTimer = GetTimeEX();
	
	-- Save the name of ammo we use
	local bagSlots = GetContainerNumSlots(self.quiverBagNr-1);
	if (GetContainerItemLink(self.quiverBagNr-1, bagSlots)  ~= nil) then
		_,_,itemLink = string.find(GetContainerItemLink(self.quiverBagNr-1, bagSlots),"(item:%d+)");
		itemName, itemLink, itemRarity, itemLevel, itemMinLevel, itemType, itemSubType,
   		itemStackCount, itemEquipLoc, itemTexture, itemSellPrice = GetItemInfo(itemLink);
		self.ammoName = itemName;
	end

	DEFAULT_CHAT_FRAME:AddMessage('script_hunter: Ammo name is set to: "' .. self.ammoName .. '" ...');
	if (not strfind(itemName, "Arrow")) then
		DEFAULT_CHAT_FRAME:AddMessage('script_hunter: Ammo will be bought at "Bullet" vendors...');
		script_vendor.itemIsArrow = false;
		self.ammoIsArrow = false;
		script_vendor.ammoName = itemName;
	else
		DEFAULT_CHAT_FRAME:AddMessage('script_hunter: Ammo will be bought at "Arrow" vendors...');
		script_vendor.ammoName = itemName;
		self.ammoIsArrow = true;
	end	

	-- Save the name of pet food we use
	if (GetContainerItemLink(self.bagWithPetFood-1, self.slotWithPetFood)  ~= nil) then
		local _, _, iLink = string.find(GetContainerItemLink(self.bagWithPetFood-1, self.slotWithPetFood), "(item:%d+)");
		local itemName, itemLink, itemRarity, itemLevel, itemMinLevel, itemType, itemSubType,
   		itemStackCount, itemEquipLoc, itemTexture = GetItemInfo(iLink);
		self.foodName = itemName;
		DEFAULT_CHAT_FRAME:AddMessage('script_hunter: Pet food name is set to: "' .. self.foodName .. '" ...');
	else
		DEFAULT_CHAT_FRAME:AddMessage('script_hunter: Please set the pet food name in hunter options...');
	end

	if (GetLocalPlayer():GetLevel() < 3) then
		self.buyWhenQuiverEmpty = false;
	end
		
	self.isSetup = true;
end

function script_hunter:cast(spellName, target)
	if (HasSpell(spellName)) then
		if (target:IsSpellInRange(spellName)) then
			if (not IsSpellOnCD(spellName)) then
				if (not IsAutoCasting(spellName)) then
					target:TargetEnemy();
					if (targetObj:IsInLineOfSight()) then
						target:FaceTarget();
					elseif (target:CastSpell(spellName)) then
						return true;
					elseif (not target:CastSpell(spellName)) then
						return false;
					end
					return target:CastSpell(spellName);
				end
			end
		end
	end
	return false;
end

function script_hunter:enemiesAttackingMe() -- returns number of enemies attacking me
	local unitsAttackingUs = 0; 
	local currentObj, typeObj = GetFirstObject(); 
	while currentObj ~= 0 do 
    	if typeObj == 3 then
		if (currentObj:CanAttack() and not currentObj:IsDead()) then
                	if (script_grind:isTargetingMe(currentObj)) then 
                		unitsAttackingUs = unitsAttackingUs + 1; 
                	end 
            	end 
       	end
        currentObj, typeObj = GetNextObject(currentObj); 
    end
    return unitsAttackingUs;
end

-- Run backwards if the target is within range
function script_hunter:runBackwards(targetObj, range) 
	local localObj = GetLocalPlayer();
 	if targetObj ~= 0 then
 		local xT, yT, zT = targetObj:GetPosition();
 		local xP, yP, zP = localObj:GetPosition();
 		local distance = targetObj:GetDistance();
 		local xV, yV, zV = xP - xT, yP - yT, zP - zT;	
 		local vectorLength = math.sqrt(xV^2 + yV^2 + zV^2);
 		local xUV, yUV, zUV = (1/vectorLength)*xV, (1/vectorLength)*yV, (1/vectorLength)*zV;		
 		local moveX, moveY, moveZ = xT + xUV*20, yT + yUV*20, zT + zUV;		
 		if (distance < range and targetObj:IsInLineOfSight()) then 
 			script_nav:moveToTarget(localObj, moveX, moveY, moveZ);
 			return true;
 		end
	end
	return false;
end

function script_hunter:draw()
	local tX, tY, onScreen = WorldToScreen(GetLocalPlayer():GetPosition());
	if (onScreen) then
		DrawText(self.message, tX+75, tY+40, 0, 255, 255);
	else
		DrawText(self.message, 25, 185, 0, 255, 255);
	end
end

function script_hunter:mendPet(localMana, petHP)

	if (HasSpell("Mend Pet")) and (self.hasPet) and (petHealth > 0) then
		if (GetPet():GetHealthPercentage() < 75) then

			script_grind.tickRate = 100;
			self.message = "Pet has lower than 75% HP, mending pet...";

			-- Check: If in range to mend the pet 
			if (GetPet():GetDistance() < 20) and (localMana > 10) and (GetPet():IsInLineOfSight()) then 
					if (IsMoving()) then
						StopMoving();
						return true;
					end 
				CastSpellByName("Mend Pet"); 
				self.waitTimer = GetTimeEX() + 1850;
				return true;
			elseif (localMana > 10) then 
				script_nav:moveToTarget(GetLocalPlayer(), GetPet():GetPosition()); 
				return true; 
			end 
			
		end
	end
	return false;
end

--[[ error codes: 	0 - All Good , 
			1 - missing arg , 
			2 - invalid target , 
			3 - not in range, 
			4 - do nothing , 
			5 - targeted player pet/totem
 ]]--



function script_hunter:run(targetGUID)

	local targetHealth = targetObj:GetHealthPercentage();
	local targetDistance = targetObj:GetDistnace();
	local localObj = GetLocalPlayer();
	local localMana = localObj:GetManaPercentage();
	local localHealth = localObj:GetHealthPercentage();
	local playerLevel = localObj:GetLevel();
	local localTarget = localObj:GetUnitsTarget();

	--pet
	local pet = GetPet();

	-- Check: Do we have a pet?
	if (self.hasPet) then
		if (localLevel < 10) then
			self.hasPet = false;
		end
	end
	
	if (pet ~= nil and pet ~= 0) then
		local petHealth = pet:GetHealthPercentage();
		local petMana = pet:GetManaPercentage();
		local petTarget = pet:GetUnitsTarget():GetGUID();
	end
	
	if (self.hasPet and not IsInCombat()) then
		if (script_hunterEX:petChecks()) then
			return 0;
		end
	end

	if (localObj:IsDead()) then
		return 0;
	end

	-- Assign the target 
	targetObj = GetGUIDObject(targetGUID);

	if(targetObj == 0 or targetObj == nil) then
		ClearTarget();
		return 2;
	end

	-- Check: Do nothing if we are channeling, casting or wait timer
	if (IsChanneling() or IsCasting() or self.waitTimer > GetTimeEX()) then
		return 4;
	end

	if (not script_grind.adjustTickRate) then
		if (not IsInCombat()) or (IsMoving()) then
			script_grind.tickRate = 100;
		elseif (IsInCombat()) and (not IsMoving()) then
			script_grind.tickRate = 450;
		end
	end

	--Valid Enemy
	if (targetObj ~= 0 and targetObj ~= nil) then
		
		-- Cant Attack dead targets
		if (targetObj:IsDead() or not targetObj:CanAttack()) then
			self.waitTimer = GetTimeEX() + 1200;
			return 0;
		end

		-- Don't attack if we should rest first
		if (localHealth < self.eatHealth) and (not script_grind:isTargetingMe(targetObj))
			and (targetHealth > 99) and (not targetObj:IsStunned()) and (script_grind.lootobj ~= nil) then
			self.message = "Need rest...";
			return 4;
		end

		-- stand if sitting
		if (not IsStanding()) then
			JumpOrAscendStart();
		end

		-- check aspects
		script_hunterEX:chooseAspect(targetObj);

		-- check mend pet
		script_hunter:mendPet();

		-- check line of sight
		if (not targetObj:IsInLineOfSight()) or (targetObj:GetDistance() < 36) then
			return 3;
		end

		-- Check: if we target player pets/totems
		if (GetTarget() ~= nil and targetObj ~= nil) then
			if (UnitPlayerControlled("target") and GetTarget() ~= localObj) then 
				script_grind:addTargetToBlacklist(targetObj:GetGUID());
				return 5; 
			end
		end 

		-- Auto Attack
		if (targetObj:GetDistance() < 40) then
			targetObj:AutoAttack();
		end

		-- follow target / facetarget
		if (targetObj:IsInLineOfSight()) and (not IsMoving()) then
			if (targetObj:GetDistance() <= self.followTargetDistance) and (targetObj:IsInLineOfSight()) then
				if (not targetObj:FaceTarget()) then
					targetObj:FaceTarget();
				end
			end
		end
		
		
			-- check and do these! -------------

			--move to target auto shot distance

			--send pet if has pet

			--if too close then move away if has pet

	------ starting combat phase and pulling of targets
		
		if (not IsInCombat()) then

			-- check line of sight and range
			if (not targetObj:IsInLineOfSight()) or (not targetObj:IsSpellInRange("Auto Shot")) then
				return 3;
			end
	
				-- no pet then do these attacks
			
			if (not self.hasPet) then

			-- move if target is too close
				if (targetObj:GetDistance() < 0.50) then
					if (script_hunter:runBackwards(targetObj, 2)) then
						self.waitTimer = GetTimeEX() + 1850;
					return 0;
				end

			-- if target is far enough to do ranged attacks then do ranged attacks

				if (targetObj:GetDistance() > 15) and (targetObj:GetDistance() < 36) then

					-- use concussive shot
					if (HasSpell("Concussive Shot")) and (not IsSpellOnCD("Concussive Shot")) and (targetObj:IsInLineOfSight()) then
						CastSpellByName("Concussive Shot");
						return 0;
					end

					-- use serpent sting
					if (Has Spell("Serpent Sting")) and (not targetObj:HasDebuff("Serpent Sting")) and (targetObj:IsInLineOfSight)) then
						CastSpellByName("Serpent Sting");
						return 0;
					end
	
					-- use arcane shot
					if (HasSpell("Arcane Shot")) and (not IsSpellOnCD("Arcane Shot")) and (targetObj:IsInLineOfSight()) then
						CastSpellByName("Arcane Shot");
						return 0;
					end
				
			-- if target is too close to do ranged attacks them move to melee and do melee attacks

				elseif (targetObj:GetDistance() < 15) then
				
					if (targetObj:GetDistance() > 5) then
						return 3;
					end

					-- Auto Attack
					if (targetObj:GetDistance() <= 5) then
						if (not targetObj:AutoAttack()) then
							targetObj:AutoAttack();
						end
					end

					-- cast raptor strike
					if (HasSpell("Raptor Strike")) and (not IsSpellOnCD("Raptor Strike")) and (localMana > 10) then
						CastSpellByName("Raptor Strike");
						return 0;
					end
					
					-- cast wing clip
					if (HasSpell("Wing Clip")) and (not IsSpellOnCD("Wing Clip")) and (localMana > 10) and (targetHealth < 35) then
						CastSpellByName("Wing Clip");
						return 0;
					end



		
			
		-- else has pet and is active	
		
		else


				--GUID checks for pet and target

				--if range satisfactory then do ranged pull
			
				--do ranged attacks

				--cast hunter's mark then release pet

				-- chec

			--if is in combat (else)
		
				--potion checks
				--skill (feign death) checks
				--do pet checks
				--mend pet
				--no pet then do melee
				--target too close then move away - melee until then
				--do ranged attacks
end
			
	force pet get units get guids to equal player target guid else stop and wait

	if not is in combat

-- if pet has a target then attack that target
			if (IsInCombat()) and (self.hasPet) and (GetPet():GetUnitsTarget() ~= 0) then
				local petsTarget = GetPet():GetUnitsTarget():GetGUID();
				if (GetLocalPlayer():GetUnitsTarget():GetGUID() ~= GetPet():GetUnitsTarget():GetGUID()) then
					script_grind.enemyObj = petsTarget;
				end
			
		localtarget == petTarget then

		send pet to attack then do other checks

	-- check line of sight and distance
	if (targetDistance > 40) or (not targetObj:IsInLineOfSight()) then
		return 3;
	end
	
	-- check auto shot range
	if (not targetObj:IsSpellInRange("Auto Shot")) then
		return 3;
	end
	
	-- stop moving when in spell range
	if (targetObj:IsSpellInRange("Auto Shot")) then
		if (not targetObj:IsFleeing()) and (IsMoving()) then
			StopMoving();
		end
	end

	-- use hunter's mark first
	if (Has Spell("Hunter's Mark")) and (not targetObj:HasDebuff("Hunter's Mark")) and (targetObj:IsInLineOfSight()) then
		CastSpellByName("Hunter's Mark");
		return 0;
	end
	
	-- use concussive shot
	if (HasSpell("Concussive Shot")) and (not IsSpellOnCD("Concussive Shot")) and (targetObj:IsInLineOfSight()) then
		CastSpellByName("Concussive Shot");
		return 0;
	end

	-- use serpent sting
	if (Has Spell("Serpent Sting")) and (not targetObj:HasDebuff("Serpent Sting")) and (targetObj:IsInLineOfSight)) then
		CastSpellByName("Serpent Sting");
		return 0;
	end
	
	-- use arcane shot
	if (HasSpell("Arcane Shot")) and (not IsSpellOnCD("Arcane Shot")) and (targetObj:IsInLineOfSight()) then
		CastSpellByName("Arcane Shot");
		return 0;
	end

	-- if distance too close then use auto attack
	If (targetDistance < 34) and (targetDistance > 13) then
		if (not IsAutoCasting("Auto Shot") then
			CastSpellByName("Auto Shot");
			return 0;
		end

	-- use melee
	elseif (targetDistance < 13) then
		if (not targetObj:IsInLineOfSight()) and (not targetDistance < 6) then
			return 3;
		end
		if (targetDistance < 5) then
			if (not IsAutoCasting("Attack")) then
				CastSpellByName("Attack");
				return 0;
			end
		end
	end

	
			is in combat
-----------------------------------

		-- run backwards when pet has aggro
		if (targetObj:GetDistance() < 14 and not script_grind:isTargetingMe(targetObj) and targetObj:GetUnitsTarget() ~= 0) then
			if (targetObj:GetUnitsTarget():GetGUID() == pet:GetGUID()) then
				script_grind.tickRate = 100;
				if (script_hunter:runBackwards(targetObj, 15)) then
					PetAttack();
					self.message = "Moving away from target for range attacks...";
					return 4;
				end
			end
		end


			-- Auto Attack
			if (targetObj:GetDistance() <= 5) then
				if (not targetObj:AutoAttack()) then
					targetObj:AutoAttack();
				end
			end

	-- check hunter's mark
	if (Has Spell("Hunter's Mark")) and (not targetObj:HasDebuff("Hunter's Mark")) and (targetObj:IsInLineOfSight()) then
		if (targetDistance > 14) and (targetDistance < 34) and (localMana > 20) then
			CastSpellByName("Hunter's Mark");
			return 0;
		end
	end
	
	-- use concussive shot
	if (HasSpell("Concussive Shot")) and (not IsSpellOnCD("Concussive Shot")) and (targetObj:IsInLineOfSight()) then
		if (targetDistance > 14) and (targetDistance < 34) and (localMana > 20) then
			CastSpellByName("Concussive Shot");
			return 0;
		end
	end

	-- use serpent sting
	if (Has Spell("Serpent Sting")) and (not targetObj:HasDebuff("Serpent Sting")) and (targetObj:IsInLineOfSight)) then
		if (targetDistance > 14) and (targetDistance < 34) and (localMana > 20) then
			CastSpellByName("Serpent Sting");
			return 0;
		end
	end
	
	-- use arcane shot
	if (HasSpell("Arcane Shot")) and (not IsSpellOnCD("Arcane Shot")) and (targetObj:IsInLineOfSight()) then
		if (targetDistance > 14) and (targetDistance < 34) and (localMana > 20) then
			CastSpellByName("Arcane Shot");
			return 0;
		end
	end

	-- check range for melee attacks
	if (targetDistance < 14) and (targetObj:IsTargetingMe()) then
		if (targetDistance > 6) then
			return 3;
		end

		-- if in melee range then do melee attacks
		if (targetDistance < 6) and (targetObj:IsTargetingMe()) then
			if (not IsAutoCasting("Attack")) then
				CastSpellByName("Attack");
				return 0;
			end
			if (HasSpell("Raptor Strike")) and (not IsSpellOnCD("Raptor Strike")) and (localMana > 10) then
				CastSpellByName("Raptor Strike");
				return 0;
			end
		end
	end

	if (targetDistance < 14) and (not targetObj:IsTargetingMe()) then
		
		move xyz
		do ranged attacks
		
		need to make pet controls
		pet guid target needs to be my target
		checks for pet - target health - self health - pet health
		line of sight and range checks



		original run function
------------------------------------
function script_hunter:run(targetGUID)
	local localObj = GetLocalPlayer();
	local localMana = localObj:GetManaPercentage();
	local localHealth = localObj:GetHealthPercentage();
	local localLevel = localObj:GetLevel();
	local petMana = GetPet():GetManaPercentage();
	local petFocus = GetPet():GetFocus();


	if (localObj:IsDead()) then
		return 0;
	end

	-- Assign the target 
	targetObj = GetGUIDObject(targetGUID);

	if(targetObj == 0 or targetObj == nil) then
		ClearTarget();
		return 2;
	end

	-- Check: Do we have a pet?
	if (self.hasPet) then
		if (localLevel < 10) then
			self.hasPet = false;
		end
	end

	local pet = GetPet();
	local petHP = 0;
	if (pet ~= nil and pet ~= 0) then
		petHP = pet:GetHealthPercentage();
	end

	if (self.hasPet and not IsInCombat()) then
		if (script_hunterEX:petChecks()) then
			return 0;
		end
	end

	-- Check: Do nothing if we are channeling, casting or wait timer
	if (IsChanneling() or IsCasting() or self.waitTimer > GetTimeEX()) then
		return 4;
	end

	if (not script_grind.adjustTickRate) then
		if (not IsInCombat()) or (IsMoving()) then
			script_grind.tickRate = 100;
		elseif (IsInCombat()) then
			script_grind.tickRate = 450;
		end
	end

	if (IsInCombat()) then
		if (not IsAutoCasting("Auto Shot")) and (targetObj:GetDistance() > 15) then
			CastSpellByName("Auto Shot");
			return 0;
		end
	end

	--Valid Enemy
	if (targetObj ~= 0 and targetObj ~= nil) then
		
		-- Cant Attack dead targets
		if (targetObj:IsDead() or not targetObj:CanAttack()) then
			self.waitTimer = GetTimeEX() + 1200;
			return 0;
		end
		
		--if (not IsStanding()) then
		--	StopMoving();
		--end

		-- Don't attack if we should rest first
		if (localHealth < self.eatHealth and not script_grind:isTargetingMe(targetObj)
			and targetHealth > 99 and not targetObj:IsStunned() and script_grind.lootobj ~= nil) then
			self.message = "Need rest...";
			return 4;
		end

		script_hunterEX:chooseAspect(targetObj);

		targetHealth = targetObj:GetHealthPercentage();

		if (not targetObj:IsInLineOfSight()) then
			return 3;
		end

		-- force stop the bot after combat and waiting for pet to return - hangs in combat phase
		if (self.hasPet) and (GetNumPartyMembers() > 0) then
			if (IsInCombat()) and (GetPet():GetUnitsTarget() == 0) and (GetLocalPlayer():GetUnitsTarget() == 0) then
				script_grind.tickRate = 100;
				self.waitTimer = GetTimeEX() + (self.waitAfterCombat * 1000);
				self.message = ("waiting dead target line 321");
			end
		end


		-- Check: if we target player pets/totems
		if (GetTarget() ~= nil and targetObj ~= nil) then
			if (UnitPlayerControlled("target") and GetTarget() ~= localObj) then 
				script_grind:addTargetToBlacklist(targetObj:GetGUID());
				return 5; 
			end
		end 

	-- Auto Attack
		if (targetObj:GetDistance() < 40) then
			targetObj:AutoAttack();
			if (not IsMoving()) and (self.hasPet) and (petMana >= 99 or petFocus >= 99) then
				PetAttack();
				if (targetObj:GetDistance() > 15) and (not IsAutoCasting("Auto Shot")) then
				CastSpellByName("Auto Shot");
				end
			end
		end

		--if (script_grind.lootObj ~= nil) and (not IsInCombat()) then
	--		ClearTarget();
	--		if (IsMoving()) then
	--			StopMoving();
	--			self.waitTimer = GetTimeEX() + 1500;
	--		end
	--	end
		
		if (not IsInCombat()) and (targetObj:GetDistance() < 36) and (localHealth > self.eatHealth) and (script_grind.lootObj == nil) then

	-- this above here is causing the bot to attack before looting

		--do some random checks to stop fast targeting?

			if (not targetObj:IsSpellInRange("Auto Shot")) or (not targetObj:IsInLineOfSight()) then
				return 3;
			end

		if (targetObj:IsSpellInRange("Auto Shot")) and (targetObj:IsInLineOfSight()) and (not targetObj:IsFleeing()) then
			if (IsMoving()) then
				StopMoving();
			end
			if (not targetObj:FaceTarget()) and (not IsMoving()) then
				targetObj:FaceTarget();
			end
		end

		if not (IsMoving()) and (HasSpell("Hunter's Mark")) and (not targetObj:HasDebuff("Hunter's Mark")) and (localHealth > self.eatHealth) then
			if (targetObj:IsSpellInRange("Auto Shot")) and (targetObj:IsInLineOfSight()) and (targetObj:GetDistance() > 17) then
				CastSpellByName("Hunter's Mark");
				targetObj:FaceTarget();
				return 0;
			end
		end

			if (self.hasPet) and (not IsMoving()) and (PetAttack()) and (script_grind.lootObj == nil) then
				self.waitTimer = GetTimeEX() + 600;
			end

			if (HasSpell("Hunter's Mark")) and (not targetObj:HasDebuff("Hunter's Mark")) then
				CastSpellByName("Hunter's Mark");
			end
			if (script_hunter:doOpenerRoutine(targetGUID, pet)) then
				self.waitTimer = GetTimeEX() + 1450;
				targetObj:FaceTarget();
				return 4; -- return 0 bugs turning around cause of StopMoving();
			else
				return 3;
			end
			
		-- Combat
		else				
			-- Check: Use Healing Potion 
			if (localHealth <= self.potionHealth) then 
				if (script_helper:useHealthPotion()) then 
					return 0; 
				end 
			end				

			-- force stop the bot after combat and waiting for pet to return - hangs in combat phase
			if (self.hasPet) and (GetNumPartyMembers() > 0) then
				if (IsInCombat()) and (GetPet():GetUnitsTarget() == 0) and (GetLocalPlayer():GetUnitsTarget() == 0) then
					script_grind.tickRate = 100;
					self.waitTimer = GetTimeEX() + (self.waitAfterCombat * 1000);
					self.message = ("waiting dead target line 321");
				end
			end

			-- Check: Use Mana Potion 
			if (localMana <= self.potionMana) then 
				if (script_helper:useManaPotion()) then 
					return 0; 
				end 
			end

			-- War Stomp Tauren Racial
			if (HasSpell("War Stomp")) and (not IsSpellOnCD("War Stomp")) and (not IsMoving()) and (targetObj:GetDistance() <= 6) then
				if (targetObj:IsCasting()) or (targetObj:IsFleeing()) or (localLevel < 10) and (IsAutoCasting("Auto Attack")) then
					CastSpellByName("War Stomp");
					self.waitTimer = GetTimeEX() + 200;
					return 0;
				end
			end

			if (script_hunter:mendPet(localMana, petHP)) then
				self.waitTimer = GetTimeEX() + 1850;
				return 0;
			end

			if (targetHealth < 95 and self.hasPet and petHP > 20 and HasSpell("Feign Death") 
				and not IsSpellOnCD("Feign Death") and script_hunter:enemiesAttackingMe() >= 1) then
				CastSpellByName("Feign Death");
				self.waitTimer = GetTimeEX() + 3850;
				return 0;
			end
	
			if (targetObj:GetDistance() < 0.50) then
				if (script_hunter:runBackwards(targetObj, 2)) then
					self.waitTimer = GetTimeEX() + 1850;
					return 0;
				end
			end

			-- Auto Attack
			if (targetObj:GetDistance() <= 5) then
				if (not targetObj:AutoAttack()) then
					targetObj:AutoAttack();
				end
			end

			if (targetObj:GetDistance() < 14 and not script_grind:isTargetingMe(targetObj) and targetObj:GetUnitsTarget() ~= 0) then
				if (targetObj:GetUnitsTarget():GetGUID() == pet:GetGUID()) then
					script_grind.tickRate = 100;
					if (script_hunter:runBackwards(targetObj, 15)) then
						PetAttack();
						self.message = "Moving away from target for range attacks...";
						return 4;
					end
				end
			end
			
			if (script_hunter:doInCombatRoutine(targetObj, localMana)) then
				self.waitTimer = GetTimeEX() + 1850;
				return 0;
			else
				return 3;
			end
		end
	end
end

			