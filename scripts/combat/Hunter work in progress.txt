	runScript(guid)

		--do pet checks
			--pet goes too far call back
			--pet dead then revive
			--mend pet
		end
	
		--if valid enemy then
		
			--check mend pet

			--move to target auto shot distance

			--send pet if has pet

			--if too close then move away if has pet

	
			--if not in combat

				--if no pet then do melee

				--GUID checks for pet and target

				--if range satisfactory then do ranged pull
			
				--do ranged attacks

			--if is in combat (else)
		
				--potion checks
				--skill (feign death) checks
				--do pet checks
				--mend pet
				--no pet then do melee
				--target too close then move away - melee until then
				--do ranged attacks
			end
		end
end
			

		





		hasPet = false,
	

function script_hunter:mendPet(localMana, petHP)
	local mendPet = HasSpell("Mend Pet");
	if (mendPet and IsInCombat() and self.hasPet and petHP > 0) then
		if (GetPet():GetHealthPercentage() < 35) then
			script_grind.tickRate = 100;
			self.message = "Pet has lower than 35% HP, mending pet...";
			-- Check: If in range to mend the pet 
			if (GetPet():GetDistance() < 20 and localMana > 10 and GetPet():IsInLineOfSight()) then 
				if (IsMoving()) then StopMoving(); return true; end 
				CastSpellByName("Mend Pet"); 
				self.waitTimer = GetTimeEX() + 1850;
				return true;
			elseif (localMana > 10) then 
				script_nav:moveToTarget(GetLocalPlayer(), GetPet():GetPosition()); 
				return true; 
			end 
			
		end
	end
	return false;
end


	force pet get units get guids to equal player target guid else stop and wait

	if not is in combat

-- if pet has a target then attack that target
			if (IsInCombat()) and (self.hasPet) and (GetPet():GetUnitsTarget() ~= 0) then
				local petsTarget = GetPet():GetUnitsTarget():GetGUID();
				if (GetLocalPlayer():GetUnitsTarget():GetGUID() ~= GetPet():GetUnitsTarget():GetGUID()) then
					script_grind.enemyObj = petsTarget;
				end
			

	local targetHealth = targetObj:GetHealthPercentage();
	local targetDistance = targetObj:GetDistnace();
	local localObj = GetLocalPlayer();
	local localMana = localObj:GetManaPercentage();
	local localHealth = localObj:GetHealthPercentage();
	local playerLevel = localObj:GetLevel();
	local pet = GetPet();
	local petHealth = pet:GetHealthPercentage();
	local petMana = pet:GetManaPercentage();
	local petTarget = pet:GetUnitsTarget():GetGUID();
	local localTarget = localObj:GetUnitsTarget();

		localtarget == petTarget then

		send pet to attack then do other checks

	-- check line of sight and distance
	if (targetDistance > 40) or (not targetObj:IsInLineOfSight()) then
		return 3;
	end
	
	-- check auto shot range
	if (not targetObj:IsSpellInRange("Auto Shot")) then
		return 3;
	end
	
	-- stop moving when in spell range
	if (targetObj:IsSpellInRange("Auto Shot")) then
		if (not targetObj:IsFleeing()) and (IsMoving()) then
			StopMoving();
		end
	end

	-- use hunter's mark first
	if (Has Spell("Hunter's Mark")) and (not targetObj:HasDebuff("Hunter's Mark")) and (targetObj:IsInLineOfSight()) then
		CastSpellByName("Hunter's Mark");
		return 0;
	end
	
	-- use concussive shot
	if (HasSpell("Concussive Shot")) and (not IsSpellOnCD("Concussive Shot")) and (targetObj:IsInLineOfSight()) then
		CastSpellByName("Concussive Shot");
		return 0;
	end

	-- use serpent sting
	if (Has Spell("Serpent Sting")) and (not targetObj:HasDebuff("Serpent Sting")) and (targetObj:IsInLineOfSight)) then
		CastSpellByName("Serpent Sting");
		return 0;
	end
	
	-- use arcane shot
	if (HasSpell("Arcane Shot")) and (not IsSpellOnCD("Arcane Shot")) and (targetObj:IsInLineOfSight()) then
		CastSpellByName("Arcane Shot");
		return 0;
	end

	-- if distance too close then use auto attack
	If (targetDistance < 34) and (targetDistance > 13) then
		if (not IsAutoCasting("Auto Shot") then
			CastSpellByName("Auto Shot");
			return 0;
		end

	-- use melee
	elseif (targetDistance < 13) then
		if (not targetObj:IsInLineOfSight()) and (not targetDistance < 6) then
			return 3;
		end
		if (targetDistance < 5) then
			if (not IsAutoCasting("Attack")) then
				CastSpellByName("Attack");
				return 0;
			end
		end
	end

	
			is in combat
-----------------------------------

		-- run backwards when pet has aggro
		if (targetObj:GetDistance() < 14 and not script_grind:isTargetingMe(targetObj) and targetObj:GetUnitsTarget() ~= 0) then
			if (targetObj:GetUnitsTarget():GetGUID() == pet:GetGUID()) then
				script_grind.tickRate = 100;
				if (script_hunter:runBackwards(targetObj, 15)) then
					PetAttack();
					self.message = "Moving away from target for range attacks...";
					return 4;
				end
			end
		end


			-- Auto Attack
			if (targetObj:GetDistance() <= 5) then
				if (not targetObj:AutoAttack()) then
					targetObj:AutoAttack();
				end
			end

	-- check hunter's mark
	if (Has Spell("Hunter's Mark")) and (not targetObj:HasDebuff("Hunter's Mark")) and (targetObj:IsInLineOfSight()) then
		if (targetDistance > 14) and (targetDistance < 34) and (localMana > 20) then
			CastSpellByName("Hunter's Mark");
			return 0;
		end
	end
	
	-- use concussive shot
	if (HasSpell("Concussive Shot")) and (not IsSpellOnCD("Concussive Shot")) and (targetObj:IsInLineOfSight()) then
		if (targetDistance > 14) and (targetDistance < 34) and (localMana > 20) then
			CastSpellByName("Concussive Shot");
			return 0;
		end
	end

	-- use serpent sting
	if (Has Spell("Serpent Sting")) and (not targetObj:HasDebuff("Serpent Sting")) and (targetObj:IsInLineOfSight)) then
		if (targetDistance > 14) and (targetDistance < 34) and (localMana > 20) then
			CastSpellByName("Serpent Sting");
			return 0;
		end
	end
	
	-- use arcane shot
	if (HasSpell("Arcane Shot")) and (not IsSpellOnCD("Arcane Shot")) and (targetObj:IsInLineOfSight()) then
		if (targetDistance > 14) and (targetDistance < 34) and (localMana > 20) then
			CastSpellByName("Arcane Shot");
			return 0;
		end
	end

	-- check range for melee attacks
	if (targetDistance < 14) and (targetObj:IsTargetingMe()) then
		if (targetDistance > 6) then
			return 3;
		end

		-- if in melee range then do melee attacks
		if (targetDistance < 6) and (targetObj:IsTargetingMe()) then
			if (not IsAutoCasting("Attack")) then
				CastSpellByName("Attack");
				return 0;
			end
			if (HasSpell("Raptor Strike")) and (not IsSpellOnCD("Raptor Strike")) and (localMana > 10) then
				CastSpellByName("Raptor Strike");
				return 0;
			end
		end
	end

	if (targetDistance < 14) and (not targetObj:IsTargetingMe()) then
		
		move xyz
		do ranged attacks
		
		need to make pet controls
		pet guid target needs to be my target
		checks for pet - target health - self health - pet health
		line of sight and range checks



		original run function
------------------------------------
function script_hunter:run(targetGUID)
	local localObj = GetLocalPlayer();
	local localMana = localObj:GetManaPercentage();
	local localHealth = localObj:GetHealthPercentage();
	local localLevel = localObj:GetLevel();
	local petMana = GetPet():GetManaPercentage();
	local petFocus = GetPet():GetFocus();


	if (localObj:IsDead()) then
		return 0;
	end

	-- Assign the target 
	targetObj = GetGUIDObject(targetGUID);

	if(targetObj == 0 or targetObj == nil) then
		ClearTarget();
		return 2;
	end

	-- Check: Do we have a pet?
	if (self.hasPet) then
		if (localLevel < 10) then
			self.hasPet = false;
		end
	end

	local pet = GetPet();
	local petHP = 0;
	if (pet ~= nil and pet ~= 0) then
		petHP = pet:GetHealthPercentage();
	end

	if (self.hasPet and not IsInCombat()) then
		if (script_hunterEX:petChecks()) then
			return 0;
		end
	end

	-- Check: Do nothing if we are channeling, casting or wait timer
	if (IsChanneling() or IsCasting() or self.waitTimer > GetTimeEX()) then
		return 4;
	end

	if (not script_grind.adjustTickRate) then
		if (not IsInCombat()) or (IsMoving()) then
			script_grind.tickRate = 100;
		elseif (IsInCombat()) then
			script_grind.tickRate = 450;
		end
	end

	if (IsInCombat()) then
		if (not IsAutoCasting("Auto Shot")) and (targetObj:GetDistance() > 15) then
			CastSpellByName("Auto Shot");
			return 0;
		end
	end

	--Valid Enemy
	if (targetObj ~= 0 and targetObj ~= nil) then
		
		-- Cant Attack dead targets
		if (targetObj:IsDead() or not targetObj:CanAttack()) then
			self.waitTimer = GetTimeEX() + 1200;
			return 0;
		end
		
		--if (not IsStanding()) then
		--	StopMoving();
		--end

		-- Don't attack if we should rest first
		if (localHealth < self.eatHealth and not script_grind:isTargetingMe(targetObj)
			and targetHealth > 99 and not targetObj:IsStunned() and script_grind.lootobj ~= nil) then
			self.message = "Need rest...";
			return 4;
		end

		script_hunterEX:chooseAspect(targetObj);

		targetHealth = targetObj:GetHealthPercentage();

		if (not targetObj:IsInLineOfSight()) then
			return 3;
		end

		-- force stop the bot after combat and waiting for pet to return - hangs in combat phase
		if (self.hasPet) and (GetNumPartyMembers() > 0) then
			if (IsInCombat()) and (GetPet():GetUnitsTarget() == 0) and (GetLocalPlayer():GetUnitsTarget() == 0) then
				script_grind.tickRate = 100;
				self.waitTimer = GetTimeEX() + (self.waitAfterCombat * 1000);
				self.message = ("waiting dead target line 321");
			end
		end


		-- Check: if we target player pets/totems
		if (GetTarget() ~= nil and targetObj ~= nil) then
			if (UnitPlayerControlled("target") and GetTarget() ~= localObj) then 
				script_grind:addTargetToBlacklist(targetObj:GetGUID());
				return 5; 
			end
		end 

	-- Auto Attack
		if (targetObj:GetDistance() < 40) then
			targetObj:AutoAttack();
			if (not IsMoving()) and (self.hasPet) and (petMana >= 99 or petFocus >= 99) then
				PetAttack();
				if (targetObj:GetDistance() > 15) and (not IsAutoCasting("Auto Shot")) then
				CastSpellByName("Auto Shot");
				end
			end
		end

		--if (script_grind.lootObj ~= nil) and (not IsInCombat()) then
	--		ClearTarget();
	--		if (IsMoving()) then
	--			StopMoving();
	--			self.waitTimer = GetTimeEX() + 1500;
	--		end
	--	end
		
		if (not IsInCombat()) and (targetObj:GetDistance() < 36) and (localHealth > self.eatHealth) and (script_grind.lootObj == nil) then

	-- this above here is causing the bot to attack before looting

		--do some random checks to stop fast targeting?

			if (not targetObj:IsSpellInRange("Auto Shot")) or (not targetObj:IsInLineOfSight()) then
				return 3;
			end

		if (targetObj:IsSpellInRange("Auto Shot")) and (targetObj:IsInLineOfSight()) and (not targetObj:IsFleeing()) then
			if (IsMoving()) then
				StopMoving();
			end
			if (not targetObj:FaceTarget()) and (not IsMoving()) then
				targetObj:FaceTarget();
			end
		end

		if not (IsMoving()) and (HasSpell("Hunter's Mark")) and (not targetObj:HasDebuff("Hunter's Mark")) and (localHealth > self.eatHealth) then
			if (targetObj:IsSpellInRange("Auto Shot")) and (targetObj:IsInLineOfSight()) and (targetObj:GetDistance() > 17) then
				CastSpellByName("Hunter's Mark");
				targetObj:FaceTarget();
				return 0;
			end
		end

			if (self.hasPet) and (not IsMoving()) and (PetAttack()) and (script_grind.lootObj == nil) then
				self.waitTimer = GetTimeEX() + 600;
			end

			if (HasSpell("Hunter's Mark")) and (not targetObj:HasDebuff("Hunter's Mark")) then
				CastSpellByName("Hunter's Mark");
			end
			if (script_hunter:doOpenerRoutine(targetGUID, pet)) then
				self.waitTimer = GetTimeEX() + 1450;
				targetObj:FaceTarget();
				return 4; -- return 0 bugs turning around cause of StopMoving();
			else
				return 3;
			end
			
		-- Combat
		else				
			-- Check: Use Healing Potion 
			if (localHealth <= self.potionHealth) then 
				if (script_helper:useHealthPotion()) then 
					return 0; 
				end 
			end				

			-- force stop the bot after combat and waiting for pet to return - hangs in combat phase
			if (self.hasPet) and (GetNumPartyMembers() > 0) then
				if (IsInCombat()) and (GetPet():GetUnitsTarget() == 0) and (GetLocalPlayer():GetUnitsTarget() == 0) then
					script_grind.tickRate = 100;
					self.waitTimer = GetTimeEX() + (self.waitAfterCombat * 1000);
					self.message = ("waiting dead target line 321");
				end
			end

			-- Check: Use Mana Potion 
			if (localMana <= self.potionMana) then 
				if (script_helper:useManaPotion()) then 
					return 0; 
				end 
			end

			-- War Stomp Tauren Racial
			if (HasSpell("War Stomp")) and (not IsSpellOnCD("War Stomp")) and (not IsMoving()) and (targetObj:GetDistance() <= 6) then
				if (targetObj:IsCasting()) or (targetObj:IsFleeing()) or (localLevel < 10) and (IsAutoCasting("Auto Attack")) then
					CastSpellByName("War Stomp");
					self.waitTimer = GetTimeEX() + 200;
					return 0;
				end
			end

			if (script_hunter:mendPet(localMana, petHP)) then
				self.waitTimer = GetTimeEX() + 1850;
				return 0;
			end

			if (targetHealth < 95 and self.hasPet and petHP > 20 and HasSpell("Feign Death") 
				and not IsSpellOnCD("Feign Death") and script_hunter:enemiesAttackingMe() >= 1) then
				CastSpellByName("Feign Death");
				self.waitTimer = GetTimeEX() + 3850;
				return 0;
			end
	
			if (targetObj:GetDistance() < 0.50) then
				if (script_hunter:runBackwards(targetObj, 2)) then
					self.waitTimer = GetTimeEX() + 1850;
					return 0;
				end
			end

			-- Auto Attack
			if (targetObj:GetDistance() <= 5) then
				if (not targetObj:AutoAttack()) then
					targetObj:AutoAttack();
				end
			end

			if (targetObj:GetDistance() < 14 and not script_grind:isTargetingMe(targetObj) and targetObj:GetUnitsTarget() ~= 0) then
				if (targetObj:GetUnitsTarget():GetGUID() == pet:GetGUID()) then
					script_grind.tickRate = 100;
					if (script_hunter:runBackwards(targetObj, 15)) then
						PetAttack();
						self.message = "Moving away from target for range attacks...";
						return 4;
					end
				end
			end
			
			if (script_hunter:doInCombatRoutine(targetObj, localMana)) then
				self.waitTimer = GetTimeEX() + 1850;
				return 0;
			else
				return 3;
			end
		end
	end
end

			